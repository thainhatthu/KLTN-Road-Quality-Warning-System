pipeline { 
    agent { label 'server' }
    parameters {
        choice(
            name: 'RUN_STAGE',
            choices: ['None','Authen', 'Data','Deeplearning','User','Frontend','Postgresql','Mongodb'],
            description: 'Chọn một giai đoạn để chạy'
        )
    }
    environment {
        REPO_GIT = "https://github.com/thainhatthu/KLTN-Road-Quality-Warning-System.git"
        POSTGRESQL_DB = 'roadvision_classifier'
    }
    triggers {
        pollSCM('* * * * *')
    }
    stages {
        stage('Clone Git Repository') {
            steps {
                git url: "${REPO_GIT}", branch: 'deployment', credentialsId: 'github'
                script {
                    def changedDirs = sh(script: 'git diff --name-only HEAD~1 HEAD', returnStdout: true).trim().split('\n')
                    env.FRONTEND_CHANGED = changedDirs.any { it.startsWith('Frontend/RoadVision-Classifier') } ? 'true' : 'false'
                    env.AUTHEN_SERVICE_CHANGED = changedDirs.any { it.startsWith('Backend/auth_service') } ? 'true' : 'false'
                    env.DATA_SERVICE_CHANGED = changedDirs.any { it.startsWith('Backend/data_service') } ? 'true' : 'false'
                    env.DEEPLEARNING_SERVICE_CHANGED = changedDirs.any { it.startsWith('Backend/deeplearning_service') } ? 'true' : 'false'
                    env.USER_SERVICE_CHANGED = changedDirs.any { it.startsWith('Backend/user_service') } ? 'true' : 'false'
                    env.POSTGRES_CHANGED = changedDirs.any { it.startsWith('Database/PostgreSQL') } ? 'true' : 'false'
                    env.MONGODB_CHANGED = changedDirs.any { it.startsWith('Database/MongoDB') } ? 'true' : 'false'

                    withCredentials([usernamePassword(credentialsId: 'POSTGRES_USER_DEV', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        env.POSTGRESQL_USER = USERNAME
                        env.POSTGRESQL_PASSWORD = PASSWORD
                        env.POSTGRESQL_HOST = "192.168.1.14"
                        env.POSTGRESQL_PORT = "5432"
                    }
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                    }
                }
            }
        }

        stage('Start all containers (initialization)') {
            steps {
                dir('KLTN-Road-Quality-Warning-System') {
                    sh '''
                        echo "[INFO] Building and starting all services (if not running)..."
                        sudo docker-compose up -d adminer kafka zookeeper nginx
                    '''
                }
            }
        }

        stage('Deploy authentication service') {
            when {
                expression { return env.AUTHEN_SERVICE_CHANGED == 'true' || params.RUN_STAGE == 'Authen' }
            }
            steps {
                withCredentials([string(credentialsId: 'secretjwt', variable: 'SECRET_TOKEN')]) {
                    script {
                        env.SECRET_KEY = SECRET_TOKEN
                        env.SECURITY_ALGORITHM = 'HS256'
                    }
                }
                dir('KLTN-Road-Quality-Warning-System') {
                    sh 'sudo docker-compose down auth_service'
                    sh 'sudo docker-compose up -d auth_service'
                }
            }
        }

        stage('Deploy data service') {
            when {
                expression { return env.DATA_SERVICE_CHANGED == 'true' || params.RUN_STAGE == 'Data' }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'MONGODB_USER', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                        env.MONGODB_USER = USERNAME
                        env.MONGODB_PASSWORD = PASSWORD
                        env.MONGODB_DB = 'roadvision_classifier'
                        env.MONGODB_PORT = '27017'
                        env.MONGODB_HOST = 'mongodb'
                    }
                }
                dir('KLTN-Road-Quality-Warning-System') {
                    sh 'sudo docker-compose down data_service'
                    sh 'sudo docker-compose up -d data_service'
                }
            }
        }

        stage('Deploy deeplearning service') {
            when {
                expression { return env.DEEPLEARNING_SERVICE_CHANGED == 'true' || params.RUN_STAGE == 'Deeplearning' }
            }
            steps {
                dir('KLTN-Road-Quality-Warning-System') {
                    sh 'sudo docker-compose down deeplearning_service'
                    sh 'sudo docker-compose up -d deeplearning_service'
                }
            }
        }

        stage('Deploy user service') {
            when {
                expression { return env.USER_SERVICE_CHANGED == 'true' || params.RUN_STAGE == 'User' }
            }
            steps {
                dir('KLTN-Road-Quality-Warning-System') {
                    sh 'sudo docker-compose down user_service'
                    sh 'sudo docker-compose up -d user_service'
                }
            }
        }

        stage('Deploy Postgresql') {
            when {
                expression { return env.POSTGRES_CHANGED == 'true' || params.RUN_STAGE == 'Postgresql' }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'POSTGRES_USER', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                        env.POSTGRES_USER = USERNAME
                        env.POSTGRES_PASSWORD = PASSWORD
                    }
                }
                withCredentials([usernamePassword(credentialsId: 'POSTGRES_USER_DEV', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                        env.POSTGRES_USER_DEV = USERNAME
                        env.POSTGRES_PASSWORD_DEV = PASSWORD
                    }
                }
                dir('KLTN-Road-Quality-Warning-System') {
                    sh 'sudo docker-compose down adminer postgredb'
                    sh 'sudo docker-compose up -d adminer postgredb'
                }
            }
        }

        stage('Deploy Mongodb') {
            when {
                expression { return env.MONGODB_CHANGED == 'true' || params.RUN_STAGE == 'Mongodb' }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'MONGODB_USER', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                        env.MONGODB_USERNAME = USERNAME
                        env.MONGODB_PASSWORD = PASSWORD
                    }
                }
                dir('KLTN-Road-Quality-Warning-System') {
                    sh 'sudo docker-compose down mongodb'
                    sh 'sudo docker-compose up -d mongodb'
                }
            }
        }

        stage('Deploy frontend') {
            when {
                expression { return env.FRONTEND_CHANGED == 'true' || params.RUN_STAGE == 'Frontend' }
            }
            steps {
                dir('KLTN-Road-Quality-Warning-System') {
                    sh 'export VITE_BASE_URL="https://exotic-strong-viper.ngrok-free.app"'
                    sh 'sudo docker-compose down frontend'
                    sh 'sudo docker-compose up -d frontend'
                }
            }
        }

        stage('Restart Nginx') {
            steps {
                dir('KLTN-Road-Quality-Warning-System') {
                    sh 'sudo docker-compose restart nginx'
                }
            }
        }
    }
}