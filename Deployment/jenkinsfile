pipeline {
    agent { label 'server' }

    parameters {
        choice(
            name: 'RUN_STAGE',
            choices: ['None','Authen', 'Data','Deeplearning','User','Frontend','Postgresql','Mongodb'],
            description: 'Chọn một giai đoạn để chạy'
        )
    }

    environment {
        REPO_GIT = "https://github.com/thainhatthu/KLTN-Road-Quality-Warning-System.git"
    }

    triggers {
        pollSCM('* * * * *') // Kiểm tra thay đổi mỗi phút
    }

    stages {
        stage('Clone Git Repository') {
            steps {
                git url: "${REPO_GIT}",
                    branch: 'deployment',
                    credentialsId: 'github'

                script {
                    def changedDirs = sh(script: 'git diff --name-only HEAD~1 HEAD', returnStdout: true).trim().split('\n')

                    env.FRONTEND_CHANGED = changedDirs.any { it.startsWith('Frontend/RoadVision-Classifier') } ? 'true' : 'false'
                    env.AUTHEN_SERVICE_CHANGED = changedDirs.any { it.startsWith('Backend/auth_service') } ? 'true' : 'false'
                    env.DATA_SERVICE_CHANGED = changedDirs.any { it.startsWith('Backend/data_service') } ? 'true' : 'false'
                    env.DEEPLEARNING_SERVICE_CHANGED = changedDirs.any { it.startsWith('Backend/deeplearning_service') } ? 'true' : 'false'
                    env.USER_SERVICE_CHANGED = changedDirs.any { it.startsWith('Backend/user_service') } ? 'true' : 'false'
                    env.POSTGRES_CHANGED = changedDirs.any { it.startsWith('Database/PostgreSQL') } ? 'true' : 'false'
                    env.MONGODB_CHANGED = changedDirs.any { it.startsWith('Database/MongoDB') } ? 'true' : 'false'
                }
            }
        }

        stage('Generate .env file') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'POSTGRES_USER_DEV', usernameVariable: 'PG_USER', passwordVariable: 'PG_PASS'),
                    usernamePassword(credentialsId: 'MONGODB_USER', usernameVariable: 'MONGO_USER', passwordVariable: 'MONGO_PASS'),
                    string(credentialsId: 'secretjwt', variable: 'SECRET')
                ]) {
                    script {
                        def envContent = """
POSTGRESQL_USER=${PG_USER}
POSTGRESQL_PASSWORD=${PG_PASS}
POSTGRESQL_DB=roadvision_classifier
POSTGRESQL_HOST=192.168.120.179
POSTGRESQL_PORT=5432

SECRET_KEY=${SECRET}
SECURITY_ALGORITHM=HS256

MONGODB_HOST=192.168.120.179
MONGODB_PORT=27017
MONGODB_DB=roadvision_classifier
MONGODB_USER=${MONGO_USER}
MONGODB_PASSWORD=${MONGO_PASS}

SERVER_AUTH=auth_service:8080
WEB_URL=http://localhost
                        """.stripIndent()

                        writeFile file: '.env', text: envContent
                    }
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                }
            }
        }

        stage('Deploy authentication service') {
            when {
                expression { return env.AUTHEN_SERVICE_CHANGED == 'true' || params.RUN_STAGE == 'Authen' }
            }
            steps {
                sh 'sudo docker compose up -d auth_service'
            }
        }

        stage('Deploy data service') {
            when {
                expression { return env.DATA_SERVICE_CHANGED == 'true' || params.RUN_STAGE == 'Data' }
            }
            steps {
                sh 'sudo docker compose up -d data_service'
            }
        }

        stage('Deploy deeplearning service') {
            when {
                expression { return env.DEEPLEARNING_SERVICE_CHANGED == 'true' || params.RUN_STAGE == 'Deeplearning' }
            }
            steps {
                sh 'sudo docker compose up -d deeplearning_service'
            }
        }

        stage('Deploy user service') {
            when {
                expression { return env.USER_SERVICE_CHANGED == 'true' || params.RUN_STAGE == 'User' }
            }
            steps {
                sh 'sudo docker compose up -d user_service'
            }
        }

        stage('Deploy frontend') {
            when {
                expression { return env.FRONTEND_CHANGED == 'true' || params.RUN_STAGE == 'Frontend' }
            }
            steps {
                sh 'sudo docker compose up -d frontend'
            }
        }

        stage('Deploy Postgresql') {
            when {
                expression { return env.POSTGRES_CHANGED == 'true' || params.RUN_STAGE == 'Postgresql' }
            }
            steps {
                sh 'sudo docker compose up -d postgredb'
            }
        }

        stage('Deploy Mongodb') {
            when {
                expression { return env.MONGODB_CHANGED == 'true' || params.RUN_STAGE == 'Mongodb' }
            }
            steps {
                sh 'sudo docker compose up -d mongodb'
            }
        }

        stage('Restart Nginx') {
            steps {
                sh 'sudo docker compose restart nginx'
            }
        }
    }
}
