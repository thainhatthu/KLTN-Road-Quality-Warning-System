version: '3.8'

services:
  postgredb:
    image: postgres:14.6-alpine3.16
    container_name: postgredb
    environment:
      # Environment variables are loaded from the .env file
      POSTGRES_USER: ${POSTGRESQL_USER}  # Database user (from .env)
      POSTGRES_PASSWORD: ${POSTGRESQL_PASSWORD}  # Database password (from .env)
      POSTGRES_DB: ${POSTGRESQL_DB}  # Database name (from .env)
      LANG:  en_US.utf8
      POSTGRES_HOST_AUTH_METHOD: trust   # Authentication method
      POSTGRES_INITDB_ARGS: --auth=md5  # Initialize DB with MD5 auth
      ALLOW_EMPTY_PASSWORD: yes
    ports:
      - 5432:5432  
    volumes:
      - ./postgres-data/:/var/lib/postgresql/data  
      - ./Database/PostgrerSQL/init_db:/docker-entrypoint-initdb.d/

  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${POSTGRESQL_DB}
    volumes:
      - ./mongodb:/data/db
      
  zookeeper:
    image: "bitnami/zookeeper:latest"
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    restart: always

  kafka:
    image: "bitnami/kafka:latest"
    container_name: kafka
    user: root
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes

    depends_on:
      - zookeeper
    restart: always

  auth_service:
    build:
      context: ./Backend/auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    environment:
      - POSTGRESQL_HOST=$POSTGRESQL_HOST
      - POSTGRESQL_DB=$POSTGRESQL_DB
      - POSTGRESQL_USER=$POSTGRESQL_USER
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
      - POSTGRESQL_PORT=$POSTGRESQL_PORT
      - SECRET_KEY=$SECRET_KEY
      - SECURITY_ALGORITHM=$SECURITY_ALGORITHM
    restart: always
  user_service:
    build:
      context: ./Backend/user_service
      dockerfile: Dockerfile
    container_name: user_service
    environment:
      - POSTGRESQL_HOST=$POSTGRESQL_HOST
      - POSTGRESQL_DB=$POSTGRESQL_DB
      - POSTGRESQL_USER=$POSTGRESQL_USER
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
      - POSTGRESQL_PORT=$POSTGRESQL_PORT
      - SERVER_AUTH=$SERVER_AUTH
    restart: always
    volumes:
      - ./image/avata/:/app/avatar
  data_service:
    build:
      context: ./Backend/data_service
      dockerfile: Dockerfile
    container_name: data_service
    environment:
      - POSTGRESQL_HOST=$POSTGRESQL_HOST
      - POSTGRESQL_DB=$POSTGRESQL_DB
      - POSTGRESQL_USER=$POSTGRESQL_USER
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
      - POSTGRESQL_PORT=$POSTGRESQL_PORT
      - MONGODB_USER=$MONGODB_USER
      - MONGODB_PASSWORD=$MONGODB_PASSWORD
      - MONGODB_DB=$MONGODB_DB
      - MONGODB_PORT=$MONGODB_PORT
      - MONGODB_HOST=$MONGODB_HOST
      - SERVER_AUTH=$SERVER_AUTH
    restart: always
    volumes:
      - ./image/road:/app/roadImages/

  deeplearning_service:
    build:
      context: ./Backend/deeplearning_service
      dockerfile: Dockerfile
    container_name: deeplearning_service
    environment:
      - POSTGRESQL_HOST=$POSTGRESQL_HOST
      - POSTGRESQL_DB=$POSTGRESQL_DB
      - POSTGRESQL_USER=$POSTGRESQL_USER
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
      - POSTGRESQL_PORT=$POSTGRESQL_PORT
    restart: always
    volumes:
      - ./models/:/app/models/
  frontend:
    build :
      context: ./Frontend/RoadVision-Classifier
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    environment:
      - VITE_BASE_URL=$WEB_URL
  nginx:
    image: nginx:1.16.0-alpine
    container_name: nginx
    volumes:
      - ./Deployment/data-nginx:/etc/nginx
    ports:
      - "80:80"
    restart: always
